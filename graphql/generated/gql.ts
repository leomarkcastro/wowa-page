/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Auction_List($input: Api_auction_listInput!) {\n    api_auction_list(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": typeof types.Auction_ListDocument,
    "\n  query Auction_Aggregate($input: Api_auction_aggregateInput!) {\n    api_auction_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n": typeof types.Auction_AggregateDocument,
    "\n  query Auction_GroupBy($input: Api_auction_groupByInput!) {\n    api_auction_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n": typeof types.Auction_GroupByDocument,
    "\n  query Auction_Get($input: Api_auction_getInput!) {\n    api_auction_get(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n    }\n  }\n": typeof types.Auction_GetDocument,
    "\n  mutation Auction_Create($input: Api_auction_createInput!) {\n    api_auction_create(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Auction_CreateDocument,
    "\n  mutation Auction_Update($input: Api_auction_updateInput!) {\n    api_auction_update(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Auction_UpdateDocument,
    "\n  mutation Auction_Delete($input: Api_auction_deleteInput!) {\n    api_auction_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Auction_DeleteDocument,
    "\n  mutation Authclient_login($email: String!, $password: String!) {\n    authclient_login(email: $email, password: $password) {\n      ... on ClientItemAuthenticationWithPasswordSuccess {\n        sessionToken\n      }\n      ... on ClientItemAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n": typeof types.Authclient_LoginDocument,
    "\n  mutation Authclient_register(\n    $email: String!\n    $password: String!\n    $firstName: String\n    $lastName: String\n  ) {\n    authclient_register(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    )\n  }\n": typeof types.Authclient_RegisterDocument,
    "\n  query Me {\n    authenticatedItem {\n      ... on User {\n        id\n        name\n        middleName\n        lastName\n        displayName\n        email\n        role\n        createdAt\n        lastLogin\n      }\n    }\n  }\n": typeof types.MeDocument,
    "\n  mutation Authclient_changePassword(\n    $oldPassword: String!\n    $newPassword: String!\n  ) {\n    authclient_changePassword(\n      oldPassword: $oldPassword\n      newPassword: $newPassword\n    )\n  }\n": typeof types.Authclient_ChangePasswordDocument,
    "\n  mutation Authclient_requestPasswordReset($email: String!) {\n    authclient_requestPasswordReset(email: $email)\n  }\n": typeof types.Authclient_RequestPasswordResetDocument,
    "\n  mutation Authclient_resetPassword($token: String!, $password: String!) {\n    authclient_resetPassword(token: $token, password: $password)\n  }\n": typeof types.Authclient_ResetPasswordDocument,
    "\n  mutation UpdateUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {\n    updateUser(where: $where, data: $data) {\n      id\n      name\n      lastName\n      displayName\n      email\n      role\n      lastLogin\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  query Car_List($input: Api_car_listInput!) {\n    api_car_list(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        status\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": typeof types.Car_ListDocument,
    "\n  query Car_Aggregate($input: Api_car_aggregateInput!) {\n    api_car_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n": typeof types.Car_AggregateDocument,
    "\n  query Car_GroupBy($input: Api_car_groupByInput!) {\n    api_car_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n": typeof types.Car_GroupByDocument,
    "\n  query Car_Get($input: Api_car_getInput!) {\n    api_car_get(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        status\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n    }\n  }\n": typeof types.Car_GetDocument,
    "\n  mutation Car_Create($input: Api_car_createInput!) {\n    api_car_create(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Car_CreateDocument,
    "\n  mutation Car_Update($input: Api_car_updateInput!) {\n    api_car_update(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Car_UpdateDocument,
    "\n  mutation Car_Delete($input: Api_car_deleteInput!) {\n    api_car_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Car_DeleteDocument,
    "\n  query Files_List($input: Api_file_listInput!) {\n    api_file_list(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": typeof types.Files_ListDocument,
    "\n  query Files_Get($input: Api_file_getInput!) {\n    api_file_get(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n    }\n  }\n": typeof types.Files_GetDocument,
    "\n  mutation Files_Create($input: Api_file_createInput!) {\n    api_file_create(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Files_CreateDocument,
    "\n  mutation Files_Update($input: Api_file_updateInput!) {\n    api_file_update(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Files_UpdateDocument,
    "\n  mutation Files_Delete($input: Api_file_deleteInput!) {\n    api_file_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Files_DeleteDocument,
    "\n  mutation File_upload($input: File_uploadInput!) {\n    file_upload(input: $input) {\n      files {\n        id\n        url\n        filename\n      }\n    }\n  }\n": typeof types.File_UploadDocument,
    "\n  mutation File_uploadURL($input: File_uploadURLInput!) {\n    file_uploadURL(input: $input) {\n      files {\n        id\n        uploadURL\n        fileName\n        viewURL\n      }\n    }\n  }\n": typeof types.File_UploadUrlDocument,
    "\n  query Members_List($input: Api_member_listInput!) {\n    api_member_list(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": typeof types.Members_ListDocument,
    "\n  query Members_Aggregate($input: Api_member_aggregateInput!) {\n    api_member_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n": typeof types.Members_AggregateDocument,
    "\n  query Members_GroupBy($input: Api_member_groupByInput!) {\n    api_member_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n": typeof types.Members_GroupByDocument,
    "\n  query Members_Get($input: Api_member_getInput!) {\n    api_member_get(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.Members_GetDocument,
    "\n  mutation Members_Create($input: Api_member_createInput!) {\n    api_member_create(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Members_CreateDocument,
    "\n  mutation Members_Update($input: Api_member_updateInput!) {\n    api_member_update(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Members_UpdateDocument,
    "\n  mutation Members_Delete($input: Api_member_deleteInput!) {\n    api_member_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": typeof types.Members_DeleteDocument,
    "\n  subscription Ping_time {\n    ping_time {\n      iso\n      data\n    }\n  }\n": typeof types.Ping_TimeDocument,
};
const documents: Documents = {
    "\n  query Auction_List($input: Api_auction_listInput!) {\n    api_auction_list(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": types.Auction_ListDocument,
    "\n  query Auction_Aggregate($input: Api_auction_aggregateInput!) {\n    api_auction_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n": types.Auction_AggregateDocument,
    "\n  query Auction_GroupBy($input: Api_auction_groupByInput!) {\n    api_auction_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n": types.Auction_GroupByDocument,
    "\n  query Auction_Get($input: Api_auction_getInput!) {\n    api_auction_get(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n    }\n  }\n": types.Auction_GetDocument,
    "\n  mutation Auction_Create($input: Api_auction_createInput!) {\n    api_auction_create(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Auction_CreateDocument,
    "\n  mutation Auction_Update($input: Api_auction_updateInput!) {\n    api_auction_update(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Auction_UpdateDocument,
    "\n  mutation Auction_Delete($input: Api_auction_deleteInput!) {\n    api_auction_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Auction_DeleteDocument,
    "\n  mutation Authclient_login($email: String!, $password: String!) {\n    authclient_login(email: $email, password: $password) {\n      ... on ClientItemAuthenticationWithPasswordSuccess {\n        sessionToken\n      }\n      ... on ClientItemAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n": types.Authclient_LoginDocument,
    "\n  mutation Authclient_register(\n    $email: String!\n    $password: String!\n    $firstName: String\n    $lastName: String\n  ) {\n    authclient_register(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    )\n  }\n": types.Authclient_RegisterDocument,
    "\n  query Me {\n    authenticatedItem {\n      ... on User {\n        id\n        name\n        middleName\n        lastName\n        displayName\n        email\n        role\n        createdAt\n        lastLogin\n      }\n    }\n  }\n": types.MeDocument,
    "\n  mutation Authclient_changePassword(\n    $oldPassword: String!\n    $newPassword: String!\n  ) {\n    authclient_changePassword(\n      oldPassword: $oldPassword\n      newPassword: $newPassword\n    )\n  }\n": types.Authclient_ChangePasswordDocument,
    "\n  mutation Authclient_requestPasswordReset($email: String!) {\n    authclient_requestPasswordReset(email: $email)\n  }\n": types.Authclient_RequestPasswordResetDocument,
    "\n  mutation Authclient_resetPassword($token: String!, $password: String!) {\n    authclient_resetPassword(token: $token, password: $password)\n  }\n": types.Authclient_ResetPasswordDocument,
    "\n  mutation UpdateUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {\n    updateUser(where: $where, data: $data) {\n      id\n      name\n      lastName\n      displayName\n      email\n      role\n      lastLogin\n    }\n  }\n": types.UpdateUserDocument,
    "\n  query Car_List($input: Api_car_listInput!) {\n    api_car_list(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        status\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": types.Car_ListDocument,
    "\n  query Car_Aggregate($input: Api_car_aggregateInput!) {\n    api_car_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n": types.Car_AggregateDocument,
    "\n  query Car_GroupBy($input: Api_car_groupByInput!) {\n    api_car_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n": types.Car_GroupByDocument,
    "\n  query Car_Get($input: Api_car_getInput!) {\n    api_car_get(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        status\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n    }\n  }\n": types.Car_GetDocument,
    "\n  mutation Car_Create($input: Api_car_createInput!) {\n    api_car_create(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Car_CreateDocument,
    "\n  mutation Car_Update($input: Api_car_updateInput!) {\n    api_car_update(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Car_UpdateDocument,
    "\n  mutation Car_Delete($input: Api_car_deleteInput!) {\n    api_car_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Car_DeleteDocument,
    "\n  query Files_List($input: Api_file_listInput!) {\n    api_file_list(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": types.Files_ListDocument,
    "\n  query Files_Get($input: Api_file_getInput!) {\n    api_file_get(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n    }\n  }\n": types.Files_GetDocument,
    "\n  mutation Files_Create($input: Api_file_createInput!) {\n    api_file_create(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Files_CreateDocument,
    "\n  mutation Files_Update($input: Api_file_updateInput!) {\n    api_file_update(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Files_UpdateDocument,
    "\n  mutation Files_Delete($input: Api_file_deleteInput!) {\n    api_file_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Files_DeleteDocument,
    "\n  mutation File_upload($input: File_uploadInput!) {\n    file_upload(input: $input) {\n      files {\n        id\n        url\n        filename\n      }\n    }\n  }\n": types.File_UploadDocument,
    "\n  mutation File_uploadURL($input: File_uploadURLInput!) {\n    file_uploadURL(input: $input) {\n      files {\n        id\n        uploadURL\n        fileName\n        viewURL\n      }\n    }\n  }\n": types.File_UploadUrlDocument,
    "\n  query Members_List($input: Api_member_listInput!) {\n    api_member_list(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n": types.Members_ListDocument,
    "\n  query Members_Aggregate($input: Api_member_aggregateInput!) {\n    api_member_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n": types.Members_AggregateDocument,
    "\n  query Members_GroupBy($input: Api_member_groupByInput!) {\n    api_member_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n": types.Members_GroupByDocument,
    "\n  query Members_Get($input: Api_member_getInput!) {\n    api_member_get(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.Members_GetDocument,
    "\n  mutation Members_Create($input: Api_member_createInput!) {\n    api_member_create(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Members_CreateDocument,
    "\n  mutation Members_Update($input: Api_member_updateInput!) {\n    api_member_update(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Members_UpdateDocument,
    "\n  mutation Members_Delete($input: Api_member_deleteInput!) {\n    api_member_delete(input: $input) {\n      count\n      ids\n    }\n  }\n": types.Members_DeleteDocument,
    "\n  subscription Ping_time {\n    ping_time {\n      iso\n      data\n    }\n  }\n": types.Ping_TimeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Auction_List($input: Api_auction_listInput!) {\n    api_auction_list(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"): (typeof documents)["\n  query Auction_List($input: Api_auction_listInput!) {\n    api_auction_list(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Auction_Aggregate($input: Api_auction_aggregateInput!) {\n    api_auction_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Auction_Aggregate($input: Api_auction_aggregateInput!) {\n    api_auction_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Auction_GroupBy($input: Api_auction_groupByInput!) {\n    api_auction_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Auction_GroupBy($input: Api_auction_groupByInput!) {\n    api_auction_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Auction_Get($input: Api_auction_getInput!) {\n    api_auction_get(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Auction_Get($input: Api_auction_getInput!) {\n    api_auction_get(input: $input) {\n      data {\n        id\n        auctionID\n        name\n        addressLine1\n        addressLine2\n        city\n        state\n        zip\n        country\n        summary\n        body\n        tags\n        eventDateStart\n        eventDateEnd\n        photoIds\n        createdAt\n        photos {\n          id\n          assignedTo\n          name\n          url\n          mime\n          size\n          metadata\n          createdAt\n          path\n          category\n          note\n        }\n        deletedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Auction_Create($input: Api_auction_createInput!) {\n    api_auction_create(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Auction_Create($input: Api_auction_createInput!) {\n    api_auction_create(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Auction_Update($input: Api_auction_updateInput!) {\n    api_auction_update(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Auction_Update($input: Api_auction_updateInput!) {\n    api_auction_update(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Auction_Delete($input: Api_auction_deleteInput!) {\n    api_auction_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Auction_Delete($input: Api_auction_deleteInput!) {\n    api_auction_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authclient_login($email: String!, $password: String!) {\n    authclient_login(email: $email, password: $password) {\n      ... on ClientItemAuthenticationWithPasswordSuccess {\n        sessionToken\n      }\n      ... on ClientItemAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authclient_login($email: String!, $password: String!) {\n    authclient_login(email: $email, password: $password) {\n      ... on ClientItemAuthenticationWithPasswordSuccess {\n        sessionToken\n      }\n      ... on ClientItemAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authclient_register(\n    $email: String!\n    $password: String!\n    $firstName: String\n    $lastName: String\n  ) {\n    authclient_register(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    )\n  }\n"): (typeof documents)["\n  mutation Authclient_register(\n    $email: String!\n    $password: String!\n    $firstName: String\n    $lastName: String\n  ) {\n    authclient_register(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    authenticatedItem {\n      ... on User {\n        id\n        name\n        middleName\n        lastName\n        displayName\n        email\n        role\n        createdAt\n        lastLogin\n      }\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    authenticatedItem {\n      ... on User {\n        id\n        name\n        middleName\n        lastName\n        displayName\n        email\n        role\n        createdAt\n        lastLogin\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authclient_changePassword(\n    $oldPassword: String!\n    $newPassword: String!\n  ) {\n    authclient_changePassword(\n      oldPassword: $oldPassword\n      newPassword: $newPassword\n    )\n  }\n"): (typeof documents)["\n  mutation Authclient_changePassword(\n    $oldPassword: String!\n    $newPassword: String!\n  ) {\n    authclient_changePassword(\n      oldPassword: $oldPassword\n      newPassword: $newPassword\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authclient_requestPasswordReset($email: String!) {\n    authclient_requestPasswordReset(email: $email)\n  }\n"): (typeof documents)["\n  mutation Authclient_requestPasswordReset($email: String!) {\n    authclient_requestPasswordReset(email: $email)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authclient_resetPassword($token: String!, $password: String!) {\n    authclient_resetPassword(token: $token, password: $password)\n  }\n"): (typeof documents)["\n  mutation Authclient_resetPassword($token: String!, $password: String!) {\n    authclient_resetPassword(token: $token, password: $password)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {\n    updateUser(where: $where, data: $data) {\n      id\n      name\n      lastName\n      displayName\n      email\n      role\n      lastLogin\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {\n    updateUser(where: $where, data: $data) {\n      id\n      name\n      lastName\n      displayName\n      email\n      role\n      lastLogin\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Car_List($input: Api_car_listInput!) {\n    api_car_list(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        status\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"): (typeof documents)["\n  query Car_List($input: Api_car_listInput!) {\n    api_car_list(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        status\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Car_Aggregate($input: Api_car_aggregateInput!) {\n    api_car_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Car_Aggregate($input: Api_car_aggregateInput!) {\n    api_car_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Car_GroupBy($input: Api_car_groupByInput!) {\n    api_car_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Car_GroupBy($input: Api_car_groupByInput!) {\n    api_car_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Car_Get($input: Api_car_getInput!) {\n    api_car_get(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        status\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Car_Get($input: Api_car_getInput!) {\n    api_car_get(input: $input) {\n      data {\n        id\n        lotId\n        vin\n        year\n        make\n        model\n        transmission\n        engineSize\n        engineNumber\n        bodyStyle\n        mileage\n        mileageType\n        isNumbersMatching\n        isRestored\n        isInDamageOrAccident\n        exteriorColor\n        factoryName\n        tires\n        wheels\n        exteriorFlags\n        exteriorDetailNote\n        interiorColor\n        interiorSurfaceMaterial\n        interiorCondition\n        mechanicalSuspensionNote\n        frameNote\n        featuresAndOptionsNote\n        notablePoints\n        reservePrice\n        marketValueHigh\n        marketValueLow\n        isSellWithoutReserve\n        photoIds\n        isConfirmedSeller\n        contactSeller\n        contactSpecialist\n        contactApprovedBy\n        auctionId\n        createdAt\n        status\n        isTitleReceived\n        isPaymentProcessed\n        isVehicleCollected\n        isTransportationDelivered\n        comments\n        contactConsignor {\n          actorType\n          name\n          middleName\n          lastName\n          company\n        }\n        contactConsignorId\n        auction {\n          summary\n          name\n          auctionID\n          eventDateStart\n          eventDateEnd\n        }\n        photos {\n          id\n          name\n          url\n          mime\n        }\n        deletedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Car_Create($input: Api_car_createInput!) {\n    api_car_create(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Car_Create($input: Api_car_createInput!) {\n    api_car_create(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Car_Update($input: Api_car_updateInput!) {\n    api_car_update(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Car_Update($input: Api_car_updateInput!) {\n    api_car_update(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Car_Delete($input: Api_car_deleteInput!) {\n    api_car_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Car_Delete($input: Api_car_deleteInput!) {\n    api_car_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Files_List($input: Api_file_listInput!) {\n    api_file_list(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"): (typeof documents)["\n  query Files_List($input: Api_file_listInput!) {\n    api_file_list(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Files_Get($input: Api_file_getInput!) {\n    api_file_get(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n    }\n  }\n"): (typeof documents)["\n  query Files_Get($input: Api_file_getInput!) {\n    api_file_get(input: $input) {\n      data {\n        id\n        assignedTo\n        name\n        url\n        mime\n        size\n        metadata\n        createdAt\n        path\n        category\n        note\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Files_Create($input: Api_file_createInput!) {\n    api_file_create(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Files_Create($input: Api_file_createInput!) {\n    api_file_create(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Files_Update($input: Api_file_updateInput!) {\n    api_file_update(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Files_Update($input: Api_file_updateInput!) {\n    api_file_update(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Files_Delete($input: Api_file_deleteInput!) {\n    api_file_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Files_Delete($input: Api_file_deleteInput!) {\n    api_file_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation File_upload($input: File_uploadInput!) {\n    file_upload(input: $input) {\n      files {\n        id\n        url\n        filename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation File_upload($input: File_uploadInput!) {\n    file_upload(input: $input) {\n      files {\n        id\n        url\n        filename\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation File_uploadURL($input: File_uploadURLInput!) {\n    file_uploadURL(input: $input) {\n      files {\n        id\n        uploadURL\n        fileName\n        viewURL\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation File_uploadURL($input: File_uploadURLInput!) {\n    file_uploadURL(input: $input) {\n      files {\n        id\n        uploadURL\n        fileName\n        viewURL\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Members_List($input: Api_member_listInput!) {\n    api_member_list(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"): (typeof documents)["\n  query Members_List($input: Api_member_listInput!) {\n    api_member_list(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n      page {\n        total\n        range {\n          from\n          to\n        }\n        page\n        pageSize\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Members_Aggregate($input: Api_member_aggregateInput!) {\n    api_member_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query Members_Aggregate($input: Api_member_aggregateInput!) {\n    api_member_aggregate(input: $input) {\n      breakdown {\n        countBy\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Members_GroupBy($input: Api_member_groupByInput!) {\n    api_member_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Members_GroupBy($input: Api_member_groupByInput!) {\n    api_member_groupBy(input: $input) {\n      breakdown {\n        uniqueIdentifier\n        counts {\n          countBy\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Members_Get($input: Api_member_getInput!) {\n    api_member_get(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query Members_Get($input: Api_member_getInput!) {\n    api_member_get(input: $input) {\n      data {\n        id\n        email\n        prefix\n        name\n        middleName\n        lastName\n        suffix\n        displayName\n        role\n        actorType\n        mobileNumber\n        faxNumber\n        homeNumber\n        secondaryEmail\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        company\n        companyContact\n        isActive\n        lastLogin\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Members_Create($input: Api_member_createInput!) {\n    api_member_create(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Members_Create($input: Api_member_createInput!) {\n    api_member_create(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Members_Update($input: Api_member_updateInput!) {\n    api_member_update(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Members_Update($input: Api_member_updateInput!) {\n    api_member_update(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Members_Delete($input: Api_member_deleteInput!) {\n    api_member_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"): (typeof documents)["\n  mutation Members_Delete($input: Api_member_deleteInput!) {\n    api_member_delete(input: $input) {\n      count\n      ids\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription Ping_time {\n    ping_time {\n      iso\n      data\n    }\n  }\n"): (typeof documents)["\n  subscription Ping_time {\n    ping_time {\n      iso\n      data\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;